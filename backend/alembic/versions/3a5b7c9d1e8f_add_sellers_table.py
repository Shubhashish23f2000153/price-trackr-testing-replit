# backend/alembic/versions/3a5b7c9d1e8f_add_sellers_table.py
"""Add sellers table and normalize product_sources and price_logs

Revision ID: 3a5b7c9d1e8f
Revises: 1a2b3c4d5e6f
Create Date: 2025-10-31 18:45:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '3a5b7c9d1e8f'
down_revision: Union[str, None] = '1a2b3c4d5e6f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 1. Create the new 'sellers' table
    op.create_table('sellers',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('marketplace', sa.String(length=100), nullable=False),
        sa.Column('seller_external_id', sa.String(length=200), nullable=True),
        sa.Column('seller_name', sa.String(length=500), nullable=False),
        sa.Column('seller_rating', sa.String(length=100), nullable=True),
        sa.Column('review_count', sa.String(length=100), nullable=True),
        sa.Column('trust_score', sa.Float(), nullable=True),
        sa.Column('verified', sa.Boolean(), nullable=True),
        sa.Column('first_seen', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('last_seen', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('marketplace', 'seller_external_id', name='_marketplace_seller_id_uc')
    )
    op.create_index(op.f('ix_sellers_id'), 'sellers', ['id'], unique=False)
    op.create_index(op.f('ix_sellers_seller_name'), 'sellers', ['seller_name'], unique=False)

    # 2. Add 'seller_id' foreign key to 'product_sources' table
    op.add_column('product_sources', sa.Column('seller_id', sa.Integer(), nullable=True))
    op.create_foreign_key(
        'fk_product_sources_seller_id_sellers',
        'product_sources', 'sellers',
        ['seller_id'], ['id'],
        ondelete='SET NULL'
    )

    # 3. Add unique constraint to 'price_logs'
    op.create_unique_constraint(
        '_product_source_scraped_at_uc',
        'price_logs',
        ['product_source_id', 'scraped_at']
    )

    # 4. Drop redundant seller columns from 'price_logs'
    op.drop_column('price_logs', 'seller_name')
    op.drop_column('price_logs', 'seller_rating')
    op.drop_column('price_logs', 'seller_review_count')
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 1. Add seller columns back to 'price_logs'
    op.add_column('price_logs', sa.Column('seller_review_count', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('price_logs', sa.Column('seller_rating', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('price_logs', sa.Column('seller_name', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    
    # 2. Drop unique constraint from 'price_logs'
    op.drop_constraint('_product_source_scraped_at_uc', 'price_logs', type_='unique')
    
    # 3. Drop 'seller_id' from 'product_sources'
    op.drop_constraint('fk_product_sources_seller_id_sellers', 'product_sources', type_='foreignkey')
    op.drop_column('product_sources', 'seller_id')
    
    # 4. Drop the 'sellers' table
    op.drop_index(op.f('ix_sellers_seller_name'), table_name='sellers')
    op.drop_index(op.f('ix_sellers_id'), table_name='sellers')
    op.drop_table('sellers')
    
    # ### end Alembic commands ###